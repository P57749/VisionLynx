{"remainingRequest":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\src\\components\\Image.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\src\\components\\Image.vue","mtime":1704597293426},{"path":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704599107236},{"path":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1704599104762},{"path":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1704599126277},{"path":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704599107236},{"path":"C:\\Users\\Patricia\\Desktop\\Raciel2\\mecvision-master\\mecvision-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1704599156770}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { eventBus } from '../main.js'\nimport AppTop from './Top.vue'\n\nexport default {\n  components: {\n    AppTop\n  },\n  data () {\n    return {\n      croppa: {},\n      croppaKey: 0,\n      initialImage: '',\n      dataUrl: '',\n      imageAccepted: false,\n      loading: false,\n      loadingDialog: false,\n      analysisStarted: false,\n      showBottomOptions: false,\n      imageType: 0\n    }\n  },\n  computed: {\n    croppaDimensions () {\n      if (this.imageType === 0) return 'width: 100%; height: 400px;'\n      if (this.imageType === 1) return 'width: 100%; height: 800px;'\n      if (this.imageType === 2) return 'width: 80%; height: 600px;'\n      return 'width = 100%; height: 400px;'\n    }\n  },\n  watch: { // This gets fired when the loading dialog needs to takeover.\n    loadingDialog (val) {\n      if (!val) return\n      setTimeout(() => (this.loadingDialog = false), 500)\n    }\n  },\n\n  methods: {\n    // testOpenCV () { // For debugging purposes, ensure that OpenCV is loaded and registered correctly\n    //   let info = cv.getBuildInformation()\n    //   console.log('main created', info, cv)\n    // },\n    resetCroppa () {\n      this.initialImage = null\n      this.croppaKey += 1\n    },\n    next () { // Used to increment through the loading screens\n      const active = parseInt(this.active)\n      this.active = (active < 5 ? active + 1 : 0)\n    },\n    loadDemoImage () {\n      let image = new Image()\n      if (this.imageType === 0) { image.src = '/mecvision/img/type-paper.jpg' }\n      if (this.imageType === 1) { image.src = '/mecvision/img/type-magnified.jpg' }\n      if (this.imageType === 2) { image.src = '/mecvision/img/type-microscope.jpg' }\n      this.initialImage = image\n      this.croppa.refresh()\n      this.$vuetify.goTo('#croppaBox', {\n      })\n    },\n    async accept () { // Using async/await for moving from image upload to analysis, where image is passed via 'generateDataUrl'\n      eventBus.$emit('appLoading')\n      eventBus.$emit('toAnalysis')\n      eventBus.$emit('loadingScreen')\n      this.analysisStarted = true\n      this.rawImage = await this.croppa.generateDataUrl('', 1) // Change the number value for increased image resolution (after testing).\n      eventBus.$emit('imageType', this.imageType)\n      await eventBus.$emit('rawImageReady', this.rawImage)\n      this.imageAccepted = true\n      await new Promise((resolve, reject) => setTimeout(resolve, 500)) // Timeout of 500ms fixes some problems of trying to pass empty string to analysis.\n    }\n  }\n}\n",{"version":3,"sources":["Image.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Image.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n<v-container>\n\n<!-- Main navigation bar here -- mostly just for aesthetic reasons -->\n<app-top></app-top>\n\n<!-- Selection of image style -- which affects crop window as well as emit of egg size data for analysis -->\n<v-layout>\n  <v-flex xs12 md6 offset-md3>\n    <v-container grid-list-xl class=\"pt-0\">\n      <h2 class=\"subheading text-xs-center pb-2\">{{ $t('Select the ovitrap image type') }}</h2>\n\n      <v-item-group v-model=\"imageType\" mandatory>\n      <v-layout row wrap justify-center>\n\n        <v-flex xs12 md4>\n          <v-item>\n            <v-card slot-scope=\"{ active, toggle }\" :style=\"active ? 'border: 2px solid var(--v-primary-base)' : ''\" :class=\"active ? 'elevation-5' : ''\" @click=\"toggle(), resetCroppa()\">\n              <v-img src=\"/mecvision/img/type-paper-thumb.jpg\" aspect-ratio=\"2.00\"></v-img>\n              <v-card-title primary-title>\n                <div>\n                  <h3 class=\"headline mb-0\">{{ $t('Paper Strip') }}</h3>\n                  <div>{{ $t('Paper-Description') }}</div>\n                </div>\n              </v-card-title>\n            </v-card>\n          </v-item>\n        </v-flex>\n\n        <v-flex xs12 md4>\n          <v-item>\n            <v-card slot-scope=\"{ active, toggle }\" :style=\"active ? 'border: 2px solid var(--v-primary-base)' : ''\" :class=\"active ? 'elevation-5' : ''\" @click=\"toggle(), resetCroppa()\">\n              <v-img src=\"/mecvision/img/type-magnified-thumb.jpg\" aspect-ratio=\"2.00\"></v-img>\n              <v-card-title primary-title>\n                <div>\n                  <h3 class=\"headline mb-0\">{{ $t('Magnified') }}</h3>\n                  <div>{{ $t('Magnified-Description') }}</div>\n                </div>\n              </v-card-title>\n            </v-card>\n          </v-item>\n        </v-flex>\n\n        <v-flex xs12 md4>\n          <v-item>\n            <v-card slot-scope=\"{ active, toggle }\" :style=\"active ? 'border: 2px solid var(--v-primary-base)' : ''\" :class=\"active ? 'elevation-5' : ''\" @click=\"toggle(), resetCroppa()\">\n              <v-img src=\"/mecvision/img/type-microscope-thumb.jpg\" aspect-ratio=\"2.00\"></v-img>\n              <v-card-title primary-title>\n                <div>\n                  <h3 class=\"headline mb-0\">{{ $t('Microscope') }}</h3>\n                  <div>{{ $t('Microscope-Description') }}</div>\n                </div>\n              </v-card-title>\n            </v-card>\n          </v-item>\n        </v-flex>\n      </v-layout>\n      </v-item-group>\n\n    </v-container>\n\n  </v-flex>\n</v-layout>\n\n<!-- Using Vue Croppa for image handling and manipulation.\nThe one thing to note is the image selection changes the styling of the crop box.\nThe image itself is then passed on via the 'accept' method below. -->\n<v-layout id=\"croppaBox\" :key=\"croppaKey\" :style=\"this.croppaDimensions\">\n  <croppa\n    v-model=\"croppa\"\n    auto-sizing\n    :zoom-speed=\"5\"\n    placeholder=\"\"\n    :show-loading=\"true\"\n    :placeholder-font-size=\"20\"\n    :loading-size=\"100\"\n    :show-remove-button=\"false\"\n    :prevent-white-space=\"false\"\n    :initial-image=\"initialImage\"\n    @initial-image-loaded=\"showBottomOptions = true\"\n    @new-image=\"showBottomOptions = true\"\n    @image-remove=\"showBottomOptions = false\"\n    >\n\n  <!-- 'Select image' button serves the same function as drag/drop image into boundary area, exept allows for file chooser explicitely. -->\n  <!-- Icons are loaded with Google Material icons. -->\n  <v-btn\n    id=\"croppaButton\" v-show=\"!croppa.imageSet\" @click=\"croppa.chooseFile()\" flat large depressed absolute>\n    {{ $t('Select Image') }}\n    <v-icon large right>photo</v-icon>\n  </v-btn>\n\n  <!-- Allowed to load a demo image as a way to test and demonstrate app functionality. -->\n  <v-btn v-show=\"!croppa.imageSet\" @click=\"loadDemoImage()\" absolute  right style=\"top: 25px\">\n    {{ $t('Demo Image') }}\n    <v-icon right>grain</v-icon>\n  </v-btn>\n\n  </croppa>\n</v-layout>\n\n<v-bottom-nav app fixed :value=\"this.showBottomOptions\" height='70'>\n\n  <v-btn flat color=\"primary\" @click=\"croppa.rotate()\">\n    <span>{{ $t('Rotate') }}</span>\n    <v-icon>rotate_right</v-icon>\n  </v-btn>\n\n  <v-btn flat color=\"primary\" @click=\"croppa.remove()\">\n    <span>{{ $t('Remove') }}</span>\n    <v-icon>cancel</v-icon>\n  </v-btn>\n\n  <v-btn flat color=\"secondary\" @click=\"accept()\">\n    <span>{{ $t('Analyze') }}</span>\n    <v-icon>check_circle</v-icon>\n  </v-btn>\n\n</v-bottom-nav>\n\n</v-container>\n\n</template>\n\n<script>\nimport { eventBus } from '../main.js'\nimport AppTop from './Top.vue'\n\nexport default {\n  components: {\n    AppTop\n  },\n  data () {\n    return {\n      croppa: {},\n      croppaKey: 0,\n      initialImage: '',\n      dataUrl: '',\n      imageAccepted: false,\n      loading: false,\n      loadingDialog: false,\n      analysisStarted: false,\n      showBottomOptions: false,\n      imageType: 0\n    }\n  },\n  computed: {\n    croppaDimensions () {\n      if (this.imageType === 0) return 'width: 100%; height: 400px;'\n      if (this.imageType === 1) return 'width: 100%; height: 800px;'\n      if (this.imageType === 2) return 'width: 80%; height: 600px;'\n      return 'width = 100%; height: 400px;'\n    }\n  },\n  watch: { // This gets fired when the loading dialog needs to takeover.\n    loadingDialog (val) {\n      if (!val) return\n      setTimeout(() => (this.loadingDialog = false), 500)\n    }\n  },\n\n  methods: {\n    // testOpenCV () { // For debugging purposes, ensure that OpenCV is loaded and registered correctly\n    //   let info = cv.getBuildInformation()\n    //   console.log('main created', info, cv)\n    // },\n    resetCroppa () {\n      this.initialImage = null\n      this.croppaKey += 1\n    },\n    next () { // Used to increment through the loading screens\n      const active = parseInt(this.active)\n      this.active = (active < 5 ? active + 1 : 0)\n    },\n    loadDemoImage () {\n      let image = new Image()\n      if (this.imageType === 0) { image.src = '/mecvision/img/type-paper.jpg' }\n      if (this.imageType === 1) { image.src = '/mecvision/img/type-magnified.jpg' }\n      if (this.imageType === 2) { image.src = '/mecvision/img/type-microscope.jpg' }\n      this.initialImage = image\n      this.croppa.refresh()\n      this.$vuetify.goTo('#croppaBox', {\n      })\n    },\n    async accept () { // Using async/await for moving from image upload to analysis, where image is passed via 'generateDataUrl'\n      eventBus.$emit('appLoading')\n      eventBus.$emit('toAnalysis')\n      eventBus.$emit('loadingScreen')\n      this.analysisStarted = true\n      this.rawImage = await this.croppa.generateDataUrl('', 1) // Change the number value for increased image resolution (after testing).\n      eventBus.$emit('imageType', this.imageType)\n      await eventBus.$emit('rawImageReady', this.rawImage)\n      this.imageAccepted = true\n      await new Promise((resolve, reject) => setTimeout(resolve, 500)) // Timeout of 500ms fixes some problems of trying to pass empty string to analysis.\n    }\n  }\n}\n</script>\n\n<style scope>\n\np {\n  line-height: 1.5;\n}\n\na {\n  text-decoration:none;\n}\n\n#croppaButton {\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n#croppaButton.v-btn:hover:before, #croppaButton.v-btn:focus:before {\n  color: transparent;\n}\n\n#croppaBox {\n  margin: auto;\n  display: block;\n  border: 3px dashed var(--v-primary-base);\n  border-radius: 0px;\n}\n\n.croppa-container {\n  width: 100%;\n  height: 100%;\n}\n\n.placeholder_icon {\n  width: 100px;\n  margin: auto;\n  display: block;\n}\n\n</style>\n"]}]}